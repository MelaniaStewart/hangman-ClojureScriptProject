{:rename-macros {}, :renames {}, :externs {document {getElementById {}}, Object {options {}, selectedIndex {}}}, :use-macros {}, :excludes #{}, :name hangman.core, :imports nil, :requires {reagent reagent.core, reagent.core reagent.core, rf re-frame.core, re-frame.core re-frame.core, str clojure.string, clojure.string clojure.string, gstring goog.string, goog.string goog.string}, :cljs.spec/speced-vars [], :uses nil, :defs {perform-restart {:protocol-inline nil, :meta {:file "/Users/melania/FromPCClojure/MyProjects/simple/hangman/src/hangman/core.cljs", :line 80, :column 7, :end-line 80, :end-column 22, :arglists (quote ([]))}, :name hangman.core/perform-restart, :variadic false, :file "src/hangman/core.cljs", :end-column 22, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 80, :end-line 80, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, new-word {:name hangman.core/new-word, :file "src/hangman/core.cljs", :line 17, :column 1, :end-line 17, :end-column 14, :meta {:file "/Users/melania/FromPCClojure/MyProjects/simple/hangman/src/hangman/core.cljs", :line 17, :column 6, :end-line 17, :end-column 14}, :tag any}, status-info {:name hangman.core/status-info, :file "src/hangman/core.cljs", :line 12, :column 1, :end-line 12, :end-column 17, :meta {:file "/Users/melania/FromPCClojure/MyProjects/simple/hangman/src/hangman/core.cljs", :line 12, :column 6, :end-line 12, :end-column 17}, :tag any}, button-div {:protocol-inline nil, :meta {:file "/Users/melania/FromPCClojure/MyProjects/simple/hangman/src/hangman/core.cljs", :line 211, :column 7, :end-line 211, :end-column 17, :arglists (quote ([]))}, :name hangman.core/button-div, :variadic false, :file "src/hangman/core.cljs", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 211, :end-line 211, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, hangman-show-new-word-div {:protocol-inline nil, :meta {:file "/Users/melania/FromPCClojure/MyProjects/simple/hangman/src/hangman/core.cljs", :line 233, :column 7, :end-line 233, :end-column 32, :arglists (quote ([]))}, :name hangman.core/hangman-show-new-word-div, :variadic false, :file "src/hangman/core.cljs", :end-column 32, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 233, :end-line 233, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, hangman-div {:protocol-inline nil, :meta {:file "/Users/melania/FromPCClojure/MyProjects/simple/hangman/src/hangman/core.cljs", :line 185, :column 7, :end-line 185, :end-column 18, :arglists (quote ([]))}, :name hangman.core/hangman-div, :variadic false, :file "src/hangman/core.cljs", :end-column 18, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 185, :end-line 185, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, word-div {:protocol-inline nil, :meta {:file "/Users/melania/FromPCClojure/MyProjects/simple/hangman/src/hangman/core.cljs", :line 197, :column 7, :end-line 197, :end-column 15, :arglists (quote ([]))}, :name hangman.core/word-div, :variadic false, :file "src/hangman/core.cljs", :end-column 15, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 197, :end-line 197, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, max-number-of-failures {:name hangman.core/max-number-of-failures, :file "src/hangman/core.cljs", :line 16, :column 1, :end-line 16, :end-column 28, :meta {:file "/Users/melania/FromPCClojure/MyProjects/simple/hangman/src/hangman/core.cljs", :line 16, :column 6, :end-line 16, :end-column 28}, :tag any}, perform-guess {:protocol-inline nil, :meta {:file "/Users/melania/FromPCClojure/MyProjects/simple/hangman/src/hangman/core.cljs", :line 128, :column 7, :end-line 128, :end-column 20, :arglists (quote ([]))}, :name hangman.core/perform-guess, :variadic false, :file "src/hangman/core.cljs", :end-column 20, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 128, :end-line 128, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, size-of-word {:name hangman.core/size-of-word, :file "src/hangman/core.cljs", :line 20, :column 1, :end-line 20, :end-column 18, :meta {:file "/Users/melania/FromPCClojure/MyProjects/simple/hangman/src/hangman/core.cljs", :line 20, :column 6, :end-line 20, :end-column 18}, :tag any}, run {:protocol-inline nil, :meta {:file "/Users/melania/FromPCClojure/MyProjects/simple/hangman/src/hangman/core.cljs", :line 269, :column 16, :end-line 269, :end-column 19, :export true, :arglists (quote ([]))}, :name hangman.core/run, :variadic false, :file "src/hangman/core.cljs", :end-column 19, :method-params ([]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 269, :end-line 269, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, re-start-div {:protocol-inline nil, :meta {:file "/Users/melania/FromPCClojure/MyProjects/simple/hangman/src/hangman/core.cljs", :line 243, :column 7, :end-line 243, :end-column 19, :arglists (quote ([]))}, :name hangman.core/re-start-div, :variadic false, :file "src/hangman/core.cljs", :end-column 19, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 243, :end-line 243, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, guess-div {:protocol-inline nil, :meta {:file "/Users/melania/FromPCClojure/MyProjects/simple/hangman/src/hangman/core.cljs", :line 204, :column 7, :end-line 204, :end-column 16, :arglists (quote ([]))}, :name hangman.core/guess-div, :variadic false, :file "src/hangman/core.cljs", :end-column 16, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 204, :end-line 204, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, perform-restart-complete-bad {:protocol-inline nil, :meta {:file "/Users/melania/FromPCClojure/MyProjects/simple/hangman/src/hangman/core.cljs", :line 102, :column 7, :end-line 102, :end-column 35, :arglists (quote ([]))}, :name hangman.core/perform-restart-complete-bad, :variadic false, :file "src/hangman/core.cljs", :end-column 35, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 102, :end-line 102, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, Complete-List {:name hangman.core/Complete-List, :file "src/hangman/core.cljs", :line 32, :column 1, :end-line 32, :end-column 19, :meta {:file "/Users/melania/FromPCClojure/MyProjects/simple/hangman/src/hangman/core.cljs", :line 32, :column 6, :end-line 32, :end-column 19}, :tag cljs.core/IList}, list-of-jpegs {:name hangman.core/list-of-jpegs, :file "src/hangman/core.cljs", :line 69, :column 1, :end-line 69, :end-column 19, :meta {:file "/Users/melania/FromPCClojure/MyProjects/simple/hangman/src/hangman/core.cljs", :line 69, :column 6, :end-line 69, :end-column 19}, :tag cljs.core/IVector}, Comp-List {:name hangman.core/Comp-List, :file "src/hangman/core.cljs", :line 14, :column 1, :end-line 14, :end-column 15, :meta {:file "/Users/melania/FromPCClojure/MyProjects/simple/hangman/src/hangman/core.cljs", :line 14, :column 6, :end-line 14, :end-column 15}, :tag any}, list-of-words {:name hangman.core/list-of-words, :file "src/hangman/core.cljs", :line 62, :column 1, :end-line 62, :end-column 19, :meta {:file "/Users/melania/FromPCClojure/MyProjects/simple/hangman/src/hangman/core.cljs", :line 62, :column 6, :end-line 62, :end-column 19}, :tag cljs.core/IVector}, remove-option {:protocol-inline nil, :meta {:file "/Users/melania/FromPCClojure/MyProjects/simple/hangman/src/hangman/core.cljs", :line 27, :column 7, :end-line 27, :end-column 20, :arglists (quote ([combo letter]))}, :name hangman.core/remove-option, :variadic false, :file "src/hangman/core.cljs", :end-column 20, :method-params ([combo letter]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 27, :end-line 27, :max-fixed-arity 2, :fn-var true, :arglists (quote ([combo letter]))}, guess-was-bad {:protocol-inline nil, :meta {:file "/Users/melania/FromPCClojure/MyProjects/simple/hangman/src/hangman/core.cljs", :line 113, :column 7, :end-line 113, :end-column 20, :arglists (quote ([]))}, :name hangman.core/guess-was-bad, :variadic false, :file "src/hangman/core.cljs", :end-column 20, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 113, :end-line 113, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, letters {:name hangman.core/letters, :file "src/hangman/core.cljs", :line 13, :column 1, :end-line 13, :end-column 13, :meta {:file "/Users/melania/FromPCClojure/MyProjects/simple/hangman/src/hangman/core.cljs", :line 13, :column 6, :end-line 13, :end-column 13}, :tag any}, number-of-failures {:name hangman.core/number-of-failures, :file "src/hangman/core.cljs", :line 21, :column 1, :end-line 21, :end-column 24, :meta {:file "/Users/melania/FromPCClojure/MyProjects/simple/hangman/src/hangman/core.cljs", :line 21, :column 6, :end-line 21, :end-column 24}, :tag any}, do-letter {:protocol-inline nil, :meta {:file "/Users/melania/FromPCClojure/MyProjects/simple/hangman/src/hangman/core.cljs", :line 25, :column 7, :end-line 25, :end-column 16, :arglists (quote ([letter]))}, :name hangman.core/do-letter, :variadic false, :file "src/hangman/core.cljs", :end-column 16, :method-params ([letter]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 25, :max-fixed-arity 1, :fn-var true, :arglists (quote ([letter]))}, status-div {:protocol-inline nil, :meta {:file "/Users/melania/FromPCClojure/MyProjects/simple/hangman/src/hangman/core.cljs", :line 221, :column 7, :end-line 221, :end-column 17, :arglists (quote ([]))}, :name hangman.core/status-div, :variadic false, :file "src/hangman/core.cljs", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 221, :end-line 221, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, ui {:protocol-inline nil, :meta {:file "/Users/melania/FromPCClojure/MyProjects/simple/hangman/src/hangman/core.cljs", :line 254, :column 7, :end-line 254, :end-column 9, :arglists (quote ([]))}, :name hangman.core/ui, :variadic false, :file "src/hangman/core.cljs", :end-column 9, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 254, :end-line 254, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, limit-to-one-letter {:protocol-inline nil, :meta {:file "/Users/melania/FromPCClojure/MyProjects/simple/hangman/src/hangman/core.cljs", :line 161, :column 7, :end-line 161, :end-column 26, :arglists (quote ([]))}, :name hangman.core/limit-to-one-letter, :variadic false, :file "src/hangman/core.cljs", :end-column 26, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 161, :end-line 161, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, letter-from-text {:name hangman.core/letter-from-text, :file "src/hangman/core.cljs", :line 15, :column 1, :end-line 15, :end-column 22, :meta {:file "/Users/melania/FromPCClojure/MyProjects/simple/hangman/src/hangman/core.cljs", :line 15, :column 6, :end-line 15, :end-column 22}, :tag any}, perform-restart-complete {:protocol-inline nil, :meta {:file "/Users/melania/FromPCClojure/MyProjects/simple/hangman/src/hangman/core.cljs", :line 97, :column 7, :end-line 97, :end-column 31, :arglists (quote ([]))}, :name hangman.core/perform-restart-complete, :variadic false, :file "src/hangman/core.cljs", :end-column 31, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 97, :end-line 97, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, img-file {:name hangman.core/img-file, :file "src/hangman/core.cljs", :line 11, :column 1, :end-line 11, :end-column 14, :meta {:file "/Users/melania/FromPCClojure/MyProjects/simple/hangman/src/hangman/core.cljs", :line 11, :column 6, :end-line 11, :end-column 14}, :tag any}}, :cljs.spec/registry-ref [], :require-macros {reagent reagent.core, reagent.core reagent.core}, :cljs.analyzer/constants {:seen #{:alt :button :value :width :type :src :on-click :size :style :div :option :for :label :id :class :padding :input :h1 :border :img :height :select}, :order [:label :value :option :div :img :id :src :alt :style :width :height :padding :border :class :select :button :type :on-click :for :input :size :h1]}, :doc nil}